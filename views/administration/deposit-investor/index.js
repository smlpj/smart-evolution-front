import Head from "next/head";
import * as React from "react";
import { useFormik } from "formik";
import * as yup from "yup";
import { Deposit } from "./components";
import { useFetch } from "../../../shared/hooks/useFetch";
import {
  RegisterDepositQuery,
  ModifyDepositQuery,
  GetDepositByID,
} from "./queries";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";

export default function RegisterDeposit() {
  const [option, setOption] = useState("");
  const [id, setId] = useState("");
  const router = useRouter();

  useEffect(() => {
    if (router && router.query) {
      setOption(Object.values(router.query)[0]);
      if (router.query.id) {
        console.log(router.query.id);
        setId(router.query.id);
      }
    }
  }, [router.query]);

  const {
    fetch: fetch,
    loading: loading,
    error: error,
    data: data,
  } = useFetch({ service: RegisterDepositQuery, init: false });

  const {
    fetch: fetch2,
    loading: loading2,
    error: error2,
    data: data2,
  } = useFetch({ service: GetDepositByID, init: false });

  const {
    fetch: fetch3,
    loading: loading3,
    error: error3,
    data: data3,
  } = useFetch({ service: ModifyDepositQuery, init: false });

  useEffect(() => {
    if (option !== "register" && option !== "" && option !== undefined) {
      fetch2(option).then((data) => {
        formik.setValues({
          id: data?.data?.id,
          date: data?.data?.date,
          amount: data?.data?.amount,
          observations: data?.data?.description,
          client: data?.data?.client.id,
          account: data?.data?.account,
        });
      });
    }
  }, [option]);

  const validationSchema = yup.object({
    client: yup
      .string("Selecciona el inversionista")
      .nullable(true)
      .required("El inversionista es requerido"),

    account: yup
      .string("Selecciona la cuenta")
      .nullable(true)
      .required("La cuenta es requerida"),

    date: yup
      .string("Ingresa la fecha de giro")
      .required("La fecha es requerida"),

    amount: yup
      .string("Ingresa el monto de operación")
      .required("El monto es requerido"),

    observations: yup.string("Ingresa una observación").nullable(true),
  });

  const initialValues = {
    client: null,
    account: null,
    amount: "",
    date: "",
    observations: "",
  };

  const formik = useFormik({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: (values) => {
      if (option === "register") {
        console.log("Registrado el giro-inversionista");
        alert("Registrado el giro-inversionista");
        fetch(values);
        router.push("/administration/deposit-investor/depositList");
      } else {
        console.log("Actualizado el giro-inversionista");
        alert("Actualizado el giro-inversionista");
        fetch3(values);
        router.push("/administration/deposit-investor/depositList");
      }
    },
  });

  return (
    <>
      <Head>
        <title>
          {option === "register"
            ? "Registrar giro-inversionista"
            : "Modificar giro-inversionista"}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/Icono Smart.svg" />
      </Head>
      <Deposit formik={formik} option={option} />
    </>
  );
}
